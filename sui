#!/bin/bash


# initializing var
export DEBIAN_FRONTEND=noninteractive
OS=`uname -m`;
MYIP=$(wget -qO- ipv4.icanhazip.com);
MYIP2="s/xxxxxxxxx/$MYIP/g";


#!/bin/bash
#proveedor=$(curl -s https://www.whoismyisp.org | grep -oP -m1 '(?<=isp">).*(?=</p)')
#if [[ $proveedor == *Amazon* ]]; then
#sudo su
#fi
#if [[ $proveedor == *Microsoft* ]]; then
#sudo su
#fi
if [[ "$USER" != 'root' ]]; then
  echo "Este Script Solo Funciona Para Usuarios root"
  exit
fi
sistema_operativo=$(cat /etc/os-release)
MYIP=$(wget -qO- ipv4.icanhazip.com);
MYIP2="s/xxxxxxxxx/$MYIP/g";
Plugin_autent='';
if [ -f /usr/lib/x86_64-linux-gnu/openvpn/plugins/openvpn-plugin-auth-pam.so ]; then
Plugin_autent='/usr/lib/x86_64-linux-gnu/openvpn/plugins/openvpn-plugin-auth-pam.so';
else
Plugin_autent='/usr/lib/openvpn/openvpn-plugin-auth-pam.so';
fi

function ubuntu_14(){
echo "INSTALANDO OPENVPN EN UBUNTU 14...\n"
apt-get -y install openvpn easy-rsa openssl iptables > /dev/null 2>&1
cp -r /usr/share/easy-rsa/ /etc/openvpn
mkdir /etc/openvpn/easy-rsa/keys > /dev/null 2>&1
sed -i 's|export KEY_COUNTRY="mx"|export KEY_COUNTRY="mx"|' /etc/openvpn/easy-rsa/vars
sed -i 's|export KEY_PROVINCE="mx"|export KEY_PROVINCE="mx"|' /etc/openvpn/easy-rsa/vars
sed -i 's|export KEY_CITY="mx"|export KEY_CITY="mx"|' /etc/openvpn/easy-rsa/vars
sed -i 's|export KEY_ORG="mx"|export KEY_ORG="mx"|' /etc/openvpn/easy-rsa/vars
sed -i 's|export KEY_EMAIL="@mx"|export KEY_EMAIL="@mx"|' /etc/openvpn/easy-rsa/vars
sed -i 's|export KEY_OU="mx"|export KEY_OU="mx"|' /etc/openvpn/easy-rsa/vars
sed -i 's|export KEY_NAME="cod3err0r"|export KEY_NAME="cod3err0r"|' /etc/openvpn/easy-rsa/vars
sed -i 's|export KEY_OU=cod3err0r|export KEY_OU=cod3err0r|' /etc/openvpn/easy-rsa/vars
# Create Diffie-Helman Pem
openssl dhparam -out /etc/openvpn/dh2048.pem 2048 > /dev/null 2>&1
# Create PKI
cd /etc/openvpn/easy-rsa
. ./vars
./clean-all
export EASY_RSA="${EASY_RSA:-.}"
"$EASY_RSA/pkitool" --initca $*
# Create key server
export EASY_RSA="${EASY_RSA:-.}"
"$EASY_RSA/pkitool" --server server
# Setting KEY CN
export EASY_RSA="${EASY_RSA:-.}"
"$EASY_RSA/pkitool" client
# Generate key for tls-auth
openvpn --genkey --secret /etc/openvpn/ta.key

cd ~/openvpn-ca/keys
sudo cp ca.crt server.crt server.key ta.key dh2048.pem /etc/openvpn
# cp /etc/openvpn/easy-rsa/keys/{server.crt,server.key,ca.crt} /etc/openvpn
cd
cp /etc/openvpn/easy-rsa/keys/server.crt /etc/openvpn/server.crt
cp /etc/openvpn/easy-rsa/keys/server.key /etc/openvpn/server.key
cp /etc/openvpn/easy-rsa/keys/ca.crt /etc/openvpn/ca.crt
cp /etc/openvpn/easy-rsa/keys/ta.key /etc/openvpn/ta.key
# Setting Server
cd /etc/openvpn/
rm server.conf > /dev/null 2>&1
wget "https://raw.githubusercontent.com/remajavpn/door/main/h/server.conf" > /dev/null 2>&1
#Create OpenVPN Config
cd
rm client.ovpn > /dev/null 2>&1
wget "https://github.com/egrojlive/codeerror/raw/master/client.ovpn" > /dev/null 2>&1
cp client.ovpn clienttcp.ovpn
sed -i $MYIP2 clienttcp.ovpn;
echo '<ca>' >> clienttcp.ovpn
cat /etc/openvpn/ca.crt >> clienttcp.ovpn
echo '</ca>' >> clienttcp.ovpn
# Restart OpenVPN
/etc/init.d/openvpn restart > /dev/null 2>&1
service openvpn start > /dev/null 2>&1
service openvpn status
# Setting USW
apt-get install ufw -y > /dev/null 2>&1
ufw allow ssh
ufw allow 80/tcp
ufw allow 81/tcp
ufw allow 3128/tcp
ufw allow 8080/tcp
ufw allow 107/tcp
ufw allow 108/tcp
ufw allow 109/tcp
ufw allow 110/tcp
ufw allow 111/tcp
ufw allow 442/tcp
ufw allow 443/tcp
ufw allow 666/tcp
ufw allow 8181/tcp
ufw allow 4444/tcp
sed -i 's|DEFAULT_INPUT_POLICY="DROP"|DEFAULT_INPUT_POLICY="ACCEPT"|' /etc/default/ufw
sed -i 's|DEFAULT_FORWARD_POLICY="DROP"|DEFAULT_FORWARD_POLICY="ACCEPT"|' /etc/default/ufw
cd /etc/ufw/
rm beore.rules > /dev/null 2>&1
wget "https://gakod.com/0s/before.rules" > /dev/null 2>&1
cd
DEBIAN_FRONTEND=noninteractive | echo "y" | ufw enable > /dev/null 2>&1
ufw status
#ufw disable
# set ipv4 forward
echo 1 > /proc/sys/net/ipv4/ip_forward
sed -i 's|#net.ipv4.ip_forward=1|net.ipv4.ip_forward=1|' /etc/sysctl.conf
echo "PROCESO TERMINADO CORREACTAMENTE"
}
function ubuntu(){
echo "INSTALANDO OPENVPN EN UBUNTU 16+...\n"
echo "VERIFICANDO REQUERIMIENTOS"
TCP_SERVICE_AND_CONFIG_NAME="openvpn_tcp"
UDP_SERVICE_AND_CONFIG_NAME="openvpn_udp"
###############################################################
if [[ "$USER" != 'root' ]]; then
  echo "LO SENTIMOS ESTE SCRIPT SOLO SE PUEDE EJECUTAR COMO ROOT"
  exit
fi
###############################################################
if [[ ! -e /dev/net/tun ]]; then
  echo "TUN/TAP is not available"
  exit
fi
###############################################################
if grep -qs "CentOS release 5" "/etc/redhat-release"; then
  echo "CentOS 5 NO ES SOPORTADO"
  exit
fi
###############################################################
if [[ -e /etc/debian_version ]]; then
  OS=debian
  RCLOCAL='/etc/rc.local'
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
  OS=centos
  RCLOCAL='/etc/rc.d/rc.local'
  # Needed for CentOS 7
  chmod +x /etc/rc.d/rc.local
else
  echo "ESTE SCRIPT SOLO FUNCIONA EN : Debian Y Ubuntu"
  exit
fi
###############################################################
newclienttcp () {
  # This function is used to create tcp client .ovpn file
  cp /etc/openvpn/clienttcp-common.txt ~/"$1tcp.ovpn"
  echo "<ca>" >> ~/"$1tcp.ovpn"
  cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/"$1tcp.ovpn"
  echo "</ca>" >> ~/"$1tcp.ovpn"
  echo "<cert>" >> ~/"$1tcp.ovpn"
  cat /etc/openvpn/easy-rsa/pki/issued/"$1.crt" >> ~/"$1tcp.ovpn"
  echo "</cert>" >> ~/"$1tcp.ovpn"
  echo "<key>" >> ~/"$1tcp.ovpn"
  cat /etc/openvpn/easy-rsa/pki/private/"$1.key" >> ~/"$1tcp.ovpn"
  echo "</key>" >> ~/"$1tcp.ovpn"
  if [ "$TLS" = "1" ]; then  #check if TLS is selected to add a TLS static key
    echo "key-direction 1" >> ~/"$1tcp.ovpn"
    echo "<tls-auth>" >> ~/"$1tcp.ovpn"
    cat /etc/openvpn/easy-rsa/pki/private/ta.key >> ~/"$1tcp.ovpn"
    echo "</tls-auth>" >> ~/"$1tcp.ovpn"
  fi
  if [ $TLSNEW = 1 ]; then
    echo "--tls-version-min 1.2" >> ~/"$1.ovpn"
  fi
}
###############################################################
function version_gt() {
   test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1";
    }
###############################################################
    IP=$(wget -qO- ipv4.icanhazip.com)
###############################################################
  clear
  echo "listening to. " $IP
  #read -p "IP address: " -e -i $IP IP
  echo ""
  #read -p "Do you want to run a UDP server [y/n]: " -e -i y UDP
  TCP=1
  #read -p "Do you want to run a TCP server [y/n]: " -e -i n TCP
  ###############################################################
  clear
  #read -p "What UDP port do you want to run OpenVPN on?: " -e -i 1194 PORT
  echo "PUERTO DE ESCUCHA : 443"
  PORTTCP=443
  #read -p "What TCP port do you want to run OpenVPN on?: " -e -i 443 PORTTCP
   echo "USANDO KEY 2048 BITS"
  KEYSIZE=2048
  DIGEST=SHA256
  #read -p "Digest Size [1-2]: " -e -i 1 DIGEST
###############################################################
  AES=0
        grep -q aes /proc/cpuinfo #Check for AES-NI availability
        if [[ "$?" -eq 0 ]]; then
         AES=1
        fi

   if [[ "$AES" -eq 1 ]]; then
         echo "Your CPU supports AES-NI instruction set."
   fi
echo "USANDO CIRADO : AES-256-CBC"
CIPHER=AES-256-CBC
echo "USANDO TLS-AUTH"
TLS=1
#read -p "Do you want to use additional TLS authentication [y/n]: " -e -i y TLS
INTERNALNETWORK=1
echo "USANDO DNS 1.1.1.1 - 9.9.9.9"
#read -p "Allow internal networking [y/n]: " -e -i y INTERNALNETWORK
DNSRESOLVER=0
ANTIVIR=0
###############################################################
if [ "$DNSRESOLVER" = 0 ]; then
DNS=1
#read -p "DNS [1-6]: " -e -i 1 DNS
CLIENT='client'
#read -p "Client name: " -e -i client CLIENT
if [[ "$OS" = 'debian' ]]; then


apt-get update -qq -y > /dev/null 2>&1
apt-get install openvpn iptables openssl -y -qq > /dev/null 2>&1
apt-get install build-essential libssl-dev liblzo2-dev libpam0g-dev easy-rsa -y > /dev/null 2>&1
ovpnversion=$(openvpn --status-version | grep -o "([0-9].*)" | sed 's/[^0-9.]//g')
if version_gt $ovpnversion "2.3.3"; then
echo "Your OpenVPN version is $ovpnversion and it supports"
echo "NOTE: Your client also must use version 2.3.3 or newer"
TLSNEW=1
#read -p "Force TLS 1.2 [y/n]: " -e -i n TLSNEW
fi

###############################################################
if [[ -d /etc/openvpn/easy-rsa/ ]]; then
  rm -rf /etc/openvpn/easy-rsa/
fi
# Get easy-rsa
wget --no-check-certificate -O ~/EasyRSA-3.0.1.tgz https://github.com/OpenVPN/easy-rsa/releases/download/3.0.1/EasyRSA-3.0.1.tgz > /dev/null 2>&1
tar xzf ~/EasyRSA-3.0.1.tgz -C ~/
mkdir /etc/openvpn
mv ~/EasyRSA-3.0.1/ /etc/openvpn/EasyRSA-3.0.1
mv /etc/openvpn/EasyRSA-3.0.1/ /etc/openvpn/easy-rsa/
chown -R root:root /etc/openvpn/easy-rsa/
rm -rf ~/EasyRSA-3.0.1.tgz
cd /etc/openvpn/easy-rsa/
# Create the PKI, set up the CA, the DH params and the server + client certificates
./easyrsa init-pki
cp vars.example vars
sed -i 's/#set_var EASYRSA_KEY_SIZE 2048/set_var EASYRSA_KEY_SIZE   '$KEYSIZE'/' vars
./easyrsa --batch build-ca nopass
./easyrsa gen-dh
./easyrsa build-server-full server nopass
./easyrsa build-client-full "$CLIENT" nopass
./easyrsa gen-crl
openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/private/ta.key
cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn
echo "GENERANDO CERTIFICADO"
echo "port $PORTTCP
proto tcp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-auth ta.key 0
push \"register-dns\"
topology subnet
server 10.9.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
cipher AES-256-CBC
user nobody
group nogroup
client-cert-not-required
username-as-common-name
plugin $Plugin_autent login
sndbuf 0
rcvbuf 0
push \"redirect-gateway def1 bypass-dhcp\"
--tls-auth /etc/openvpn/easy-rsa/pki/private/ta.key 0
push \"dhcp-option DNS 1.1.1.1\"
push \"dhcp-option DNS 9.9.9.9\"
keepalive 10 120
comp-lzo
persist-key
persist-tun
status openvpn-status.log
verb 3
crl-verify /etc/openvpn/easy-rsa/pki/crl.pem
client-to-client
" > /etc/openvpn/$TCP_SERVICE_AND_CONFIG_NAME.conf

  sed -i 's|#net.ipv4.ip_forward=1|net.ipv4.ip_forward=1|' /etc/sysctl.conf
  sed -i " 5 a\echo 1 > /proc/sys/net/ipv4/ip_forward" $RCLOCAL    # Added for servers that don't read from sysctl at startup

  echo 1 > /proc/sys/net/ipv4/ip_forward
  # Set NAT for the VPN subnet
     if [ "$INTERNALNETWORK" = 1 ]; then
    if [ "$TCP" = 1 ]; then
      iptables -t nat -A POSTROUTING -s 10.9.0.0/24 ! -d 10.9.0.0/24 -j SNAT --to $IP
      sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.9.0.0/24 ! -d 10.9.0.0/24 -j SNAT --to $IP" $RCLOCAL
      fi
     else
    if [ "$TCP" = 1 ]; then
      iptables -t nat -A POSTROUTING -s 10.9.0.0/24  ! -d 10.9.0.1 -j SNAT --to $IP #This line and the next one are added for tcp server instance
      sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.9.0.0/24 -j SNAT --to $IP" $RCLOCAL
    fi
   fi

  if iptables -L | grep -q REJECT; then
    if [ "$TCP" = 1 ]; then
      iptables -I INPUT -p udp --dport $PORTTCP -j ACCEPT #This line and next 5 lines have been added for tcp support
      iptables -I FORWARD -s 10.9.0.0/24 -j ACCEPT
      iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
      sed -i "1 a\iptables -I INPUT -p tcp --dport $PORTTCP -j ACCEPT" $RCLOCAL
      sed -i "1 a\iptables -I FORWARD -s 10.9.0.0/24 -j ACCEPT" $RCLOCAL
      sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
    fi
  fi

  if [ "$TCP" = 1 ]; then
    echo "[Unit]
#Created by openvpn-install-advanced (https://github.com/pl48415/openvpn-install-advanced)
Description=OpenVPN Robust And Highly Flexible Tunneling Application On <server>
After=syslog.target network.target

[Service]
Type=forking
PIDFile=/var/run/openvpn/$TCP_SERVICE_AND_CONFIG_NAME.pid
ExecStart=/usr/sbin/openvpn --daemon --writepid /var/run/openvpn/$TCP_SERVICE_AND_CONFIG_NAME.pid --cd /etc/openvpn/ --config $TCP_SERVICE_AND_CONFIG_NAME.conf

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/$TCP_SERVICE_AND_CONFIG_NAME.service
    if pgrep systemd-journal; then
      sudo systemctl enable $TCP_SERVICE_AND_CONFIG_NAME.service
    fi
  fi

  if pgrep systemd-journal; then
    sudo systemctl start openvpn.service
  else
    if [[ "$OS" = 'debian' ]]; then
      /etc/init.d/openvpn start
    else
      service openvpn start
    fi
  fi
service openvpn_tcp restart
  EXTERNALIP=$(wget -qO- ipv4.icanhazip.com)
if [ "$TCP" = 1 ]; then
echo "client
cipher $CIPHER
auth-user-pass
dev tun
proto tcp
remote $IP $PORTTCP tcp-client
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
comp-lzo
verb 3
sndbuf 0
rcvbuf 0
" > /etc/openvpn/clienttcp-common.txt
newclienttcp "$CLIENT"
  fi
  if [ "$TCP" = 1 ]; then
  echo "Your TCP client config is available at ~/${CLIENT}tcp.ovpn"
  fi
fi
if [ "$DNSRESOLVER" = 1 ]; then
service unbound restart
service openvpn_tcp restart
fi
fi
service openvpn_tcp restart
  }
function debian(){
echo "INSTALANDO OPENVPN DEBIAN...\n"
echo "VERIFICANDO REQUERIMIENTOS"
TCP_SERVICE_AND_CONFIG_NAME="openvpn_tcp"
UDP_SERVICE_AND_CONFIG_NAME="openvpn_udp"
###############################################################
if [[ "$USER" != 'root' ]]; then
  echo "LO SENTIMOS ESTE SCRIPT SOLO SE PUEDE EJECUTAR COMO ROOT"
  exit
fi
###############################################################
if [[ ! -e /dev/net/tun ]]; then
  echo "TUN/TAP is not available"
  exit
fi
###############################################################
if grep -qs "CentOS release 5" "/etc/redhat-release"; then
  echo "CentOS 5 NO ES SOPORTADO"
  exit
fi
###############################################################
if [[ -e /etc/debian_version ]]; then
  OS=debian
  RCLOCAL='/etc/rc.local'
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
  OS=centos
  RCLOCAL='/etc/rc.d/rc.local'
  # Needed for CentOS 7
  chmod +x /etc/rc.d/rc.local
else
  echo "ESTE SCRIPT SOLO FUNCIONA EN : Debian Y Ubuntu"
  exit
fi
###############################################################
newclienttcp () {
  # This function is used to create tcp client .ovpn file
  cp /etc/openvpn/clienttcp-common.txt ~/"$1tcp.ovpn"
  echo "<ca>" >> ~/"$1tcp.ovpn"
  cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/"$1tcp.ovpn"
  echo "</ca>" >> ~/"$1tcp.ovpn"
  echo "<cert>" >> ~/"$1tcp.ovpn"
  cat /etc/openvpn/easy-rsa/pki/issued/"$1.crt" >> ~/"$1tcp.ovpn"
  echo "</cert>" >> ~/"$1tcp.ovpn"
  echo "<key>" >> ~/"$1tcp.ovpn"
  cat /etc/openvpn/easy-rsa/pki/private/"$1.key" >> ~/"$1tcp.ovpn"
  echo "</key>" >> ~/"$1tcp.ovpn"
  if [ "$TLS" = "1" ]; then  #check if TLS is selected to add a TLS static key
    echo "key-direction 1" >> ~/"$1tcp.ovpn"
    echo "<tls-auth>" >> ~/"$1tcp.ovpn"
    cat /etc/openvpn/easy-rsa/pki/private/ta.key >> ~/"$1tcp.ovpn"
    echo "</tls-auth>" >> ~/"$1tcp.ovpn"
  fi
  if [ $TLSNEW = 1 ]; then
    echo "--tls-version-min 1.2" >> ~/"$1.ovpn"
  fi
}
###############################################################
function version_gt() {
   test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1";
    }
###############################################################
    IP=$(wget -qO- ipv4.icanhazip.com)
###############################################################
  clear
  echo "listening to. " $IP
  #read -p "IP address: " -e -i $IP IP
  echo ""
  #read -p "Do you want to run a UDP server [y/n]: " -e -i y UDP
  TCP=1
  #read -p "Do you want to run a TCP server [y/n]: " -e -i n TCP
  ###############################################################
  clear
  #read -p "What UDP port do you want to run OpenVPN on?: " -e -i 1194 PORT
  echo "PUERTO DE ESCUCHA : 443"
  PORTTCP=443
  #read -p "What TCP port do you want to run OpenVPN on?: " -e -i 443 PORTTCP
   echo "USANDO KEY 2048 BITS"
  KEYSIZE=2048
  DIGEST=SHA256
  #read -p "Digest Size [1-2]: " -e -i 1 DIGEST
###############################################################
  AES=0
        grep -q aes /proc/cpuinfo #Check for AES-NI availability
        if [[ "$?" -eq 0 ]]; then
         AES=1
        fi

   if [[ "$AES" -eq 1 ]]; then
         echo "Your CPU supports AES-NI instruction set."
   fi
echo "USANDO CIRADO : AES-256-CBC"
CIPHER=AES-256-CBC
echo "USANDO TLS-AUTH"
TLS=1
#read -p "Do you want to use additional TLS authentication [y/n]: " -e -i y TLS
INTERNALNETWORK=1
echo "USANDO DNS 1.1.1.1 - 9.9.9.9"
#read -p "Allow internal networking [y/n]: " -e -i y INTERNALNETWORK
DNSRESOLVER=0
ANTIVIR=0
###############################################################
if [ "$DNSRESOLVER" = 0 ]; then
DNS=1
#read -p "DNS [1-6]: " -e -i 1 DNS
CLIENT='client'
#read -p "Client name: " -e -i client CLIENT
if [[ "$OS" = 'debian' ]]; then


apt-get update -qq -y > /dev/null 2>&1
apt-get install openvpn iptables openssl -y -qq > /dev/null 2>&1
apt-get install build-essential libssl-dev liblzo2-dev libpam0g-dev easy-rsa -y > /dev/null 2>&1
ovpnversion=$(openvpn --status-version | grep -o "([0-9].*)" | sed 's/[^0-9.]//g')
if version_gt $ovpnversion "2.3.3"; then
echo "Your OpenVPN version is $ovpnversion and it supports"
echo "NOTE: Your client also must use version 2.3.3 or newer"
TLSNEW=1
#read -p "Force TLS 1.2 [y/n]: " -e -i n TLSNEW
fi

###############################################################
if [[ -d /etc/openvpn/easy-rsa/ ]]; then
  rm -rf /etc/openvpn/easy-rsa/
fi
# Get easy-rsa
wget --no-check-certificate -O ~/EasyRSA-3.0.1.tgz https://github.com/OpenVPN/easy-rsa/releases/download/3.0.1/EasyRSA-3.0.1.tgz > /dev/null 2>&1
tar xzf ~/EasyRSA-3.0.1.tgz -C ~/
mkdir /etc/openvpn
mv ~/EasyRSA-3.0.1/ /etc/openvpn/EasyRSA-3.0.1
mv /etc/openvpn/EasyRSA-3.0.1/ /etc/openvpn/easy-rsa/
chown -R root:root /etc/openvpn/easy-rsa/
rm -rf ~/EasyRSA-3.0.1.tgz
cd /etc/openvpn/easy-rsa/
# Create the PKI, set up the CA, the DH params and the server + client certificates
./easyrsa init-pki
cp vars.example vars
sed -i 's/#set_var EASYRSA_KEY_SIZE 2048/set_var EASYRSA_KEY_SIZE   '$KEYSIZE'/' vars
./easyrsa --batch build-ca nopass
./easyrsa gen-dh
./easyrsa build-server-full server nopass
./easyrsa build-client-full "$CLIENT" nopass
./easyrsa gen-crl
openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/private/ta.key
cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn
echo "GENERANDO CERTIFICADO"
echo "port $PORTTCP
proto tcp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-auth ta.key 0
push \"register-dns\"
topology subnet
server 10.9.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
cipher AES-256-CBC
user nobody
group nogroup
client-cert-not-required
username-as-common-name
plugin $Plugin_autent login
sndbuf 0
rcvbuf 0
push \"redirect-gateway def1 bypass-dhcp\"
--tls-auth /etc/openvpn/easy-rsa/pki/private/ta.key 0
push \"dhcp-option DNS 1.1.1.1\"
push \"dhcp-option DNS 9.9.9.9\"
keepalive 10 120
comp-lzo
persist-key
persist-tun
status openvpn-status.log
verb 3
crl-verify /etc/openvpn/easy-rsa/pki/crl.pem
client-to-client
" > /etc/openvpn/$TCP_SERVICE_AND_CONFIG_NAME.conf

  sed -i 's|#net.ipv4.ip_forward=1|net.ipv4.ip_forward=1|' /etc/sysctl.conf
  sed -i " 5 a\echo 1 > /proc/sys/net/ipv4/ip_forward" $RCLOCAL    # Added for servers that don't read from sysctl at startup

  echo 1 > /proc/sys/net/ipv4/ip_forward
  # Set NAT for the VPN subnet
     if [ "$INTERNALNETWORK" = 1 ]; then
    if [ "$TCP" = 1 ]; then
      iptables -t nat -A POSTROUTING -s 10.9.0.0/24 ! -d 10.9.0.0/24 -j SNAT --to $IP
      sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.9.0.0/24 ! -d 10.9.0.0/24 -j SNAT --to $IP" $RCLOCAL
      fi
     else
    if [ "$TCP" = 1 ]; then
      iptables -t nat -A POSTROUTING -s 10.9.0.0/24  ! -d 10.9.0.1 -j SNAT --to $IP #This line and the next one are added for tcp server instance
      sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.9.0.0/24 -j SNAT --to $IP" $RCLOCAL
    fi
   fi

  if iptables -L | grep -q REJECT; then
    if [ "$TCP" = 1 ]; then
      iptables -I INPUT -p udp --dport $PORTTCP -j ACCEPT #This line and next 5 lines have been added for tcp support
      iptables -I FORWARD -s 10.9.0.0/24 -j ACCEPT
      iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
      sed -i "1 a\iptables -I INPUT -p tcp --dport $PORTTCP -j ACCEPT" $RCLOCAL
      sed -i "1 a\iptables -I FORWARD -s 10.9.0.0/24 -j ACCEPT" $RCLOCAL
      sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
    fi
  fi

  if [ "$TCP" = 1 ]; then
    echo "[Unit]
#Created by openvpn-install-advanced (https://github.com/pl48415/openvpn-install-advanced)
Description=OpenVPN Robust And Highly Flexible Tunneling Application On <server>
After=syslog.target network.target

[Service]
Type=forking
PIDFile=/var/run/openvpn/$TCP_SERVICE_AND_CONFIG_NAME.pid
ExecStart=/usr/sbin/openvpn --daemon --writepid /var/run/openvpn/$TCP_SERVICE_AND_CONFIG_NAME.pid --cd /etc/openvpn/ --config $TCP_SERVICE_AND_CONFIG_NAME.conf

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/$TCP_SERVICE_AND_CONFIG_NAME.service
    if pgrep systemd-journal; then
      sudo systemctl enable $TCP_SERVICE_AND_CONFIG_NAME.service
    fi
  fi

  if pgrep systemd-journal; then
    sudo systemctl start openvpn.service
  else
    if [[ "$OS" = 'debian' ]]; then
      /etc/init.d/openvpn start
    else
      service openvpn start
    fi
  fi
service openvpn_tcp restart
  EXTERNALIP=$(wget -qO- ipv4.icanhazip.com)
if [ "$TCP" = 1 ]; then
echo "client
cipher $CIPHER
dev tun
proto tcp
remote $IP $PORTTCP tcp
persist-key
persist-tun
pull
resolv-retry infinite
nobind
comp-lzo
setenv CLIENT_CERT 0
remote-cert-tls server
verb 3
mute-replay-warnings
auth-user-pass
auth-nocache
redirect-gateway def1
script-security 2
route-method exe
route-delay 2
cipher none
" > /etc/openvpn/clienttcp-common.txt
newclienttcp "$CLIENT"
  fi
  if [ "$TCP" = 1 ]; then
  echo "Your TCP client config is available at ~/${CLIENT}tcp.ovpn"
  fi
fi
if [ "$DNSRESOLVER" = 1 ]; then
service unbound restart
service openvpn_tcp restart
fi
fi
service openvpn_tcp restart
  }




if cat /etc/*release | grep DISTRIB_DESCRIPTION | grep "Ubuntu 14.04" > /dev/null 2>&1; then
ubuntu_14
elif [[ $sistema_operativo == *Ubuntu* ]]; then
ubuntu
elif [[ $sistema_operativo == *Debian* ]]; then
debian
else
echo "este script no es compatible con este sistema operativo\n" $sistema_operativo
fi


# company name details
country=MY
state=MY
locality=Malaysia
organization=Personal
organizationalunit=Personal
commonname=RangersVPN
email=rangersvpn@gmail.com

if [ $USER != 'root' ]; then
echo "Sorry, for run the script please using root user"
exit 1
fi
if [[ "$EUID" -ne 0 ]]; then
echo "Sorry, you need to run this as root"
exit 2
fi
if [[ ! -e /dev/net/tun ]]; then
echo "TUN is not available"
exit 3
fi
echo "
AUTOSCRIPT BY RANGERSVPN

PLEASE CANCEL ALL PACKAGE POPUP

TAKE NOTE !!!"
clear
echo "START AUTOSCRIPT"
clear
echo "SET TIMEZONE KUALA LUMPUT GMT +8"
ln -fs /usr/share/zoneinfo/Asia/Kuala_Lumpur /etc/localtime;
clear
echo "
ENABLE IPV4 AND IPV6

COMPLETE 1%
"
echo ipv4 >> /etc/modules
echo ipv6 >> /etc/modules
sysctl -w net.ipv4.ip_forward=1
sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /etc/sysctl.conf
sed -i 's/#net.ipv6.conf.all.forwarding=1/net.ipv6.conf.all.forwarding=1/g' /etc/sysctl.conf
sysctl -p
clear
echo "
REMOVE SPAM PACKAGE

COMPLETE 10%
"
apt-get -y --purge remove samba*;
apt-get -y --purge remove apache2*;
apt-get -y --purge remove sendmail*;
apt-get -y --purge remove postfix*;
apt-get -y --purge remove bind*;
apt-get -y install wget curl

clear
echo "
UPDATE AND UPGRADE PROCESS

PLEASE WAIT TAKE TIME 1-5 MINUTE
"
# set repo
echo 'deb http://download.webmin.com/download/repository sarge contrib' >> /etc/apt/sources.list.d/webmin.list
wget "http://www.dotdeb.org/dotdeb.gpg"
cat dotdeb.gpg | apt-key add -;rm dotdeb.gpg
wget -qO - http://www.webmin.com/jcameron-key.asc | apt-key add -
apt-get update
apt-get -y install nginx
apt-get -y install nano iptables-persistent dnsutils screen whois ngrep unzip unrar
echo "
INSTALLER PROCESS PLEASE WAIT

TAKE TIME 5-10 MINUTE
"
# script
wget -O /usr/local/bin/menu "https://raw.githubusercontent.com/ara-rangers/vps/master/menu"
wget -O /usr/local/bin/m "https://raw.githubusercontent.com/ara-rangers/vps/master/menu"
wget -O /usr/local/bin/autokill "https://raw.githubusercontent.com/ara-rangers/vps/master/autokill"
wget -O /usr/local/bin/user-generate "https://raw.githubusercontent.com/ara-rangers/vps/master/user-generate"
wget -O /usr/local/bin/speedtest "https://raw.githubusercontent.com/ara-rangers/vps/master/speedtest"
wget -O /usr/local/bin/user-lock "https://raw.githubusercontent.com/ara-rangers/vps/master/user-lock"
wget -O /usr/local/bin/user-unlock "https://raw.githubusercontent.com/ara-rangers/vps/master/user-unlock"
wget -O /usr/local/bin/auto-reboot "https://raw.githubusercontent.com/ara-rangers/vps/master/auto-reboot"
wget -O /usr/local/bin/user-password "https://raw.githubusercontent.com/ara-rangers/vps/master/user-password"
wget -O /usr/local/bin/trial "https://raw.githubusercontent.com/ara-rangers/vps/master/trial"
wget -O /etc/pam.d/common-password "https://raw.githubusercontent.com/ara-rangers/vps/master/common-password"
chmod +x /etc/pam.d/common-password
chmod +x /usr/local/bin/menu
chmod +x /usr/local/bin/m
chmod +x /usr/local/bin/autokill 
chmod +x /usr/local/bin/user-generate 
chmod +x /usr/local/bin/speedtest 
chmod +x /usr/local/bin/user-unlock
chmod +x /usr/local/bin/user-lock
chmod +x /usr/local/bin/auto-reboot
chmod +x /usr/local/bin/user-password
chmod +x /usr/local/bin/trial

# fail2ban & exim & protection
apt-get install -y grepcidr
apt-get install -y libxml-parser-perl
apt-get -y install tcpdump fail2ban sysv-rc-conf dnsutils dsniff zip unzip;
wget https://github.com/jgmdev/ddos-deflate/archive/master.zip;unzip master.zip;
cd ddos-deflate-master && ./install.sh
service exim4 stop;sysv-rc-conf exim4 off;

# webmin
apt-get -y install webmin
sed -i 's/ssl=1/ssl=0/g' /etc/webmin/miniserv.conf
# ssh
sed -i 's/#Banner/Banner/g' /etc/ssh/sshd_config
sed -i 's/AcceptEnv/#AcceptEnv/g' /etc/ssh/sshd_config
wget -O /etc/issue.net "https://raw.githubusercontent.com/ara-rangers/vps/master/banner"

# setting port ssh
sed -i 's/Port 22/Port 22/g' /etc/ssh/sshd_config

# install dropbear
apt-get -y install dropbear
sed -i 's/NO_START=1/NO_START=0/g' /etc/default/dropbear
sed -i 's/DROPBEAR_PORT=22/DROPBEAR_PORT=444/g' /etc/default/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
/etc/init.d/dropbear restart

# install squid
apt-get -y install squid
wget -O /etc/squid/squid.conf "https://raw.githubusercontent.com/ara-rangers/vps/master/squid3.conf"
sed -i $MYIP2 /etc/squid/squid.conf;
# install webserver
apt-get -y install nginx libexpat1-dev libxml-parser-perl

# install essential package
apt-get -y install nano iptables-persistent dnsutils screen whois ngrep unzip unrar

# install webserver
cd
rm /etc/nginx/sites-enabled/default
rm /etc/nginx/sites-available/default
wget -O /etc/nginx/nginx.conf "https://raw.githubusercontent.com/ara-rangers/vps/master/nginx.conf"
mkdir -p /home/vps/public_html
echo "<pre>SETUP BY ARA PM +601126996292</pre>" > /home/vps/public_html/index.html
wget -O /etc/nginx/conf.d/vps.conf "https://raw.githubusercontent.com/ara-rangers/vps/master/vps.conf"





# install badvpn
cd
wget -O /usr/bin/badvpn-udpgw "https://github.com/ara-rangers/vps/raw/master/badvpn-udpgw"
if [ "$OS" == "x86_64" ]; then
  wget -O /usr/bin/badvpn-udpgw "https://github.com/ara-rangers/vps/raw/master/badvpn-udpgw64"
fi
sed -i '$ i\screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300' /etc/rc.local
chmod +x /usr/bin/badvpn-udpgw
screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300

# install stunnel
apt-get install stunnel4 -y
cat > /etc/stunnel/stunnel.conf <<-END
cert = /etc/stunnel/stunnel.pem
client = no
socket = a:SO_REUSEADDR=1
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
[dropbear]
accept = 442
connect = 127.0.0.1:443
END

# make a certificate
openssl genrsa -out key.pem 2048
openssl req -new -x509 -key key.pem -out cert.pem -days 1095 \
-subj "/C=$country/ST=$state/L=$locality/O=$organization/OU=$organizationalunit/CN=$commonname/emailAddress=$email"
cat key.pem cert.pem >> /etc/stunnel/stunnel.pem

# configure stunnel
sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
/etc/init.d/stunnel4 restart

cd

# install vnstat gui
apt-get install vnstat
cd /home/vps/public_html/
wget http://www.sqweek.com/sqweek/files/vnstat_php_frontend-1.5.1.tar.gz
tar xf vnstat_php_frontend-1.5.1.tar.gz
rm vnstat_php_frontend-1.5.1.tar.gz
mv vnstat_php_frontend-1.5.1 vnstat
cd vnstat
sed -i "s/eth0/venet0/g" config.php
sed -i "s/\$iface_list = array('venet0', 'sixxs');/\$iface_list = array('venet0');/g" config.php
sed -i "s/\$language = 'nl';/\$language = 'en';/g" config.php
sed -i "s/Internal/Internet/g" config.php
sed -i "/SixXS IPv6/d" config.php
service vnstat restart

echo "UPDATE AND INSTALL COMPLETE COMPLETE 99% BE PATIENT"
rm *.sh;rm *.txt;rm *.tar;rm *.deb;rm *.asc;rm *.zip;rm ddos*;

clear
# freeradius
apt-get -y install freeradius
cat /dev/null > /etc/freeradius/users
echo "ara Cleartext-Password := ara" > /etc/freeradius/users
# Lock Dropbear Expired ID
wget -O /usr/local/bin/lockidexp.sh "https://raw.githubusercontent.com/ara-rangers/vps/master/lockidexp.sh"
chmod +x /usr/local/bin/lockidexp.sh
crontab -l > mycron
echo "1 8 * * * /usr/local/bin/lockidexp.sh" >> mycron
crontab mycron
rm mycron
# BlockTorrent
wget -O /usr/local/bin/BlockTorrentEveryReboot "https://raw.githubusercontent.com/ara-rangers/vps/master/BlockTorrentEveryReboot"
chmod +x /usr/local/bin/BlockTorrentEveryReboot
crontab -l > mycron
echo "@reboot /usr/local/bin/BlockTorrentEveryReboot" >> mycron
crontab mycron
rm mycron
# restart service
service stunnel4 restart
service ssh restart
service openvpn restart
service dropbear restart
service nginx restart
service webmin restart
service squid restart
service fail2ban restart
service freeradius restart
clear

# softether
apt install build-essential -y;
cd && wget https://github.com/SoftEtherVPN/SoftEtherVPN_Stable/releases/download/v4.28-9669-beta/softether-vpnserver-v4.28-9669-beta-2018.09.11-linux-x64-64bit.tar.gz
tar xzf softether-vpnserver-v4.28-9669-beta-2018.09.11-linux-x64-64bit.tar.gz
clear
echo  -e "\033[31;7mNOTE: ANSWER 1 AND ENTER THREE TIMES FOR THE COMPILATION TO PROCEED\033[0m"
cd vpnserver && make && ./vpnserver start
mkdir /usr/local/vpnserver/
cd && mv vpnserver /usr/local && cd /usr/local/vpnserver/ && chmod 600 * && chmod 700 vpnserver && chmod 700 vpncmd
crontab -l > mycron
echo "@reboot /usr/local/vpnserver/vpnserver start" >> mycron
crontab mycron
rm mycron
/usr/local/vpnserver/vpnserver start
clear

# finishing
cd
chown -R www-data:www-data /home/vps/public_html
/etc/init.d/nginx restart
/etc/init.d/openvpn restart
/etc/init.d/cron restart
/etc/init.d/ssh restart
/etc/init.d/dropbear restart
/etc/init.d/fail2ban restart
/etc/init.d/webmin restart
/etc/init.d/stunnel4 restart
/etc/init.d/squid start
rm -rf ~/.bash_history && history -c
echo "unset HISTFILE" >> /etc/profile

# grep ports 
opensshport="$(netstat -ntlp | grep -i ssh | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
dropbearport="$(netstat -nlpt | grep -i dropbear | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
stunnel4port="$(netstat -nlpt | grep -i stunnel | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
openvpnport="$(netstat -nlpt | grep -i openvpn | grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"
squidport="$(cat /etc/squid/squid.conf | grep -i http_port | awk '{print $2}')"
nginxport="$(netstat -nlpt | grep -i nginx| grep -i 0.0.0.0 | awk '{print $4}' | cut -d: -f2)"

# END SCRIPT ( RANGERSVPN )
echo "========================================"  | tee -a log-install.txt
echo "Service Autoscript VPS (RANGERSVPN)"  | tee -a log-install.txt
echo "----------------------------------------"  | tee -a log-install.txt
echo "POWER BY RANGERSVPN CALL +601126996292"  | tee -a log-install.txt
echo "nginx : http://$MYIP:80"   | tee -a log-install.txt
echo "Webmin : http://$MYIP:10000/"  | tee -a log-install.txt
echo "OpenVPN  : TCP 443 (client config : http://$MYIP/client.ovpn)"  | tee -a log-install.txt
echo "Badvpn UDPGW : 7300"   | tee -a log-install.txt
echo "Stunnel SSL/TLS : 442"   | tee -a log-install.txt
echo "Squid3 : 3128,3129,8080,8000,9999"  | tee -a log-install.txt
echo "OpenSSH : 22"  | tee -a log-install.txt
echo "Dropbear : 444"  | tee -a log-install.txt
echo "Fail2Ban : [on]"  | tee -a log-install.txt
echo "AntiDDOS : [on]"  | tee -a log-install.txt
echo "Modify(@aramaiti85)AntiTorrent : [on]"  | tee -a log-install.txt
echo "Timezone : Asia/Kuala_Lumpur"  | tee -a log-install.txt
echo "Menu : type menu to check menu script"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "RADIUS Authentication Settings:"  | tee -a log-install.txt
echo "Radius Server Hostname: 127.0.0.1"  | tee -a log-install.txt
echo "Radius Port: 1812 (UDP)"  | tee -a log-install.txt
echo "Shared Secret: testing123"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "SoftEtherVPN Port: 8888"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "----------------------------------------"
echo "LOG INSTALL  --> /root/log-install.txt"
echo "----------------------------------------"
echo "========================================"  | tee -a log-install.txt
echo "      PLEASE REBOOT TAKE EFFECT !"
echo "========================================"  | tee -a log-install.txt
cat /dev/null > ~/.bash_history && history -c
